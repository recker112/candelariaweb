{"version":3,"sources":["../../../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../../../node_modules/date-fns/esm/toDate/index.js","../../../node_modules/date-fns/esm/_lib/toInteger/index.js","../../../node_modules/@material-ui/pickers/esm/useUtils-cfb96ac9.js","../../../node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","../../../node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","../../../node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","../../../node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","../../../node_modules/date-fns/esm/_lib/format/formatters/index.js","../../../node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","../../../node_modules/date-fns/esm/format/index.js","../../../node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","../../../node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","../../../node_modules/date-fns/esm/isValid/index.js","../../../node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","../../../node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","../../../node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","../../../node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","../../../node_modules/date-fns/esm/_lib/format/longFormatters/index.js","../../../node_modules/date-fns/esm/_lib/protectedTokens/index.js","../../../node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","../../../node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","../../../node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","../../../node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","../../../node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","../../../node_modules/date-fns/esm/locale/en-US/index.js","../../../node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","../../../node_modules/date-fns/esm/addMilliseconds/index.js","../../../node_modules/date-fns/esm/subMilliseconds/index.js","../../../node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","../../../node_modules/date-fns/esm/_lib/getUTCWeek/index.js","../../../node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","../../../node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","../../../node_modules/date-fns/esm/addDays/index.js","../../../node_modules/date-fns/esm/addMonths/index.js","../../../node_modules/date-fns/esm/addYears/index.js","../../../node_modules/date-fns/esm/endOfDay/index.js","../../../node_modules/date-fns/esm/endOfWeek/index.js","../../../node_modules/date-fns/esm/endOfYear/index.js","../../../node_modules/date-fns/esm/isAfter/index.js","../../../node_modules/date-fns/esm/isBefore/index.js","../../../node_modules/date-fns/esm/startOfDay/index.js","../../../node_modules/date-fns/esm/startOfHour/index.js","../../../node_modules/date-fns/esm/_lib/assign/index.js","../../../node_modules/date-fns/esm/_lib/setUTCDay/index.js","../../../node_modules/date-fns/esm/parse/_lib/parsers/index.js","../../../node_modules/date-fns/esm/_lib/setUTCWeek/index.js","../../../node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","../../../node_modules/date-fns/esm/_lib/setUTCISODay/index.js","../../../node_modules/date-fns/esm/parse/index.js","../../../node_modules/date-fns/esm/getDaysInMonth/index.js","../../../node_modules/date-fns/esm/startOfMonth/index.js","../../../node_modules/date-fns/esm/endOfMonth/index.js","../../../node_modules/date-fns/esm/startOfWeek/index.js","../../../node_modules/date-fns/esm/startOfYear/index.js","../../../node_modules/@date-io/date-fns/build/index.esm.js","../../../node_modules/date-fns/esm/differenceInMilliseconds/index.js","../../../node_modules/date-fns/esm/getHours/index.js","../../../node_modules/date-fns/esm/setHours/index.js","../../../node_modules/date-fns/esm/setMinutes/index.js","../../../node_modules/date-fns/esm/getSeconds/index.js","../../../node_modules/date-fns/esm/setSeconds/index.js","../../../node_modules/date-fns/esm/isSameDay/index.js","../../../node_modules/date-fns/esm/isSameMonth/index.js","../../../node_modules/date-fns/esm/isSameYear/index.js","../../../node_modules/date-fns/esm/isSameHour/index.js","../../../node_modules/date-fns/esm/getYear/index.js","../../../node_modules/date-fns/esm/setYear/index.js","../../../node_modules/date-fns/esm/isEqual/index.js","../../../node_modules/date-fns/esm/setMonth/index.js","../../../node_modules/date-fns/esm/eachDayOfInterval/index.js","../../../node_modules/date-fns/esm/locale/es/_lib/formatDistance/index.js","../../../node_modules/date-fns/esm/locale/es/_lib/formatLong/index.js","../../../node_modules/date-fns/esm/locale/es/_lib/formatRelative/index.js","../../../node_modules/date-fns/esm/locale/es/_lib/localize/index.js","../../../node_modules/date-fns/esm/locale/es/index.js","../../../node_modules/date-fns/esm/locale/es/_lib/match/index.js"],"names":["requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","toInteger","dirtyNumber","number","Number","isNaN","Math","ceil","floor","MuiPickersContext","createContext","MuiPickersUtilsProvider","_ref","Utils","utils","children","locale","libInstance","useMemo","instance","createElement","Provider","value","useUtils","useContext","checkUtils","startOfUTCWeek","dirtyDate","dirtyOptions","options","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","date","day","getUTCDay","diff","setUTCDate","getUTCDate","setUTCHours","startOfUTCISOWeek","addLeadingZeros","targetLength","sign","output","abs","formatters","y","token","signedYear","getUTCFullYear","year","M","month","getUTCMonth","String","d","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","pow","dayPeriodEnum","formatTimezoneShort","offset","dirtyDelimiter","absOffset","hours","minutes","delimiter","formatTimezoneWithOptionalMinutes","formatTimezone","G","localize","era","width","ordinalNumber","unit","lightFormatters","Y","signedWeekYear","getUTCWeekYear","weekYear","R","getUTCISOWeekYear","u","Q","quarter","context","q","L","w","week","getUTCWeek","I","isoWeek","getUTCISOWeek","D","dayOfYear","timestamp","setUTCMonth","startOfYearTimestamp","difference","getUTCDayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","dayPeriod","b","B","K","k","X","_localize","timezoneOffset","_originalDate","getTimezoneOffset","x","O","z","t","originalDate","T","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","format","dirtyFormatStr","formatStr","defaultLocale","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","formatLong","isValid","getTimezoneOffsetInMilliseconds","utcDate","subMilliseconds","formatterOptions","result","match","map","substring","firstCharacter","longFormatter","longFormatters","join","cleanEscapedString","formatter","useAdditionalWeekYearTokens","isProtectedWeekYearToken","throwProtectedError","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","input","replace","firstWeekOfNextYear","setUTCFullYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","buildFormatLongFn","defaultWidth","formats","buildLocalizeFn","dirtyIndex","valuesArray","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","buildMatchPatternFn","dirtyString","string","matchResult","matchPattern","matchedString","parseResult","parsePattern","valueCallback","rest","slice","buildMatchFn","matchPatterns","defaultMatchWidth","parsePatterns","defaultParseWidth","array","predicate","key","findIndex","pattern","test","object","hasOwnProperty","findKey","dateLongFormatter","timeLongFormatter","time","p","P","dateTimeFormat","datePattern","timePattern","dateTime","protectedDayOfYearTokens","protectedWeekYearTokens","indexOf","concat","getDateMillisecondsPart","baseTimezoneOffset","setSeconds","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","full","long","medium","short","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","_dirtyOptions","rem100","narrow","abbreviated","wide","am","pm","midnight","noon","morning","afternoon","evening","night","code","formatDistance","count","addSuffix","comparison","formatRelative","_date","_baseDate","_options","parseInt","any","index","addMilliseconds","dirtyAmount","amount","startOfUTCWeekYear","firstWeek","round","startOfUTCISOWeekYear","fourthOfJanuary","addDays","setDate","getDate","addMonths","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","addYears","endOfDay","setHours","endOfWeek","getDay","endOfYear","isAfter","dirtyDateToCompare","dateToCompare","isBefore","startOfDay","startOfHour","setMinutes","assign","target","dirtyObject","property","setUTCDay","dirtyDay","currentDay","remainder","dayIndex","numericPatterns","timezonePatterns","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","parsers","priority","parse","set","flags","incompatibleTokens","isTwoDigitYear","validate","normalizedTwoDigitYear","_match","_flags","firstWeekOfYear","dirtyWeek","setUTCWeek","dirtyISOWeek","setUTCISOWeek","subPriority","isLeapYear","wholeWeekDays","setUTCISODay","isPM","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","timestampIsSet","_token","notWhitespaceRegExp","dateToSystemTimezone","convertedDate","getDaysInMonth","monthIndex","lastDayOfMonth","startOfMonth","endOfMonth","startOfWeek","startOfYear","cleanDate","DateFnsUtils","_a","this","yearFormat","yearMonthFormat","dateTime12hFormat","dateTime24hFormat","time12hFormat","time24hFormat","dateFormat","getDiff","comparing","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","differenceInMilliseconds","getHours","dirtyHours","dirtyMinutes","getSeconds","seconds","dirtySeconds","isSameDay","dateLeftStartOfDay","dateRightStartOfDay","isSameMonth","isSameYear","isSameHour","dateLeftStartOfHour","dateRightStartOfHour","getYear","setYear","dirtyYear","formatString","dirtyDateString","dirtyFormatString","dirtyReferenceDate","dateString","subFnOptions","setters","tokens","usedTokens","parser","Array","isArray","incompatibleToken","_i","usedToken","fullToken","push","uniquePrioritySetters","setter","sort","filter","setterArray","dateFnsParse","isEqual","dirtyLeftDate","dirtyRightDate","isNull","isAfterDay","isBeforeDay","isBeforeYear","isAfterYear","formatNumber","numberToFormat","getMinutes","dirtyMonth","dateWithDesiredMonth","min","getMeridiemText","ampm","getNextMonth","getPreviousMonth","getMonthArray","monthArray","prevMonth","mergeDateAndTime","getWeekdays","_this","now","dirtyInterval","interval","startDate","start","endDate","end","endTime","dates","currentDate","step","eachDayOfInterval","getWeekArray","current","nestedWeeks","weekNumber","getYearRange","years","getCalendarHeaderText","getYearText","getDatePickerHeaderText","getDateTimePickerHeaderText","getMonthText","getDayText","getHourText","getMinuteText","getSecondText","formatRelativeLocalePlural"],"mappings":"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","file":"static/js/6.8cf29ea9.chunk.js","sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import { createContext, useMemo, createElement, useContext } from 'react';\nimport { func, oneOfType, object, string, element, arrayOf } from 'prop-types';\n\nvar MuiPickersContext = createContext(null);\nvar MuiPickersUtilsProvider = function MuiPickersUtilsProvider(_ref) {\n  var Utils = _ref.utils,\n      children = _ref.children,\n      locale = _ref.locale,\n      libInstance = _ref.libInstance;\n  var utils = useMemo(function () {\n    return new Utils({\n      locale: locale,\n      instance: libInstance\n    });\n  }, [Utils, libInstance, locale]);\n  return createElement(MuiPickersContext.Provider, {\n    value: utils,\n    children: children\n  });\n};\nprocess.env.NODE_ENV !== \"production\" ? MuiPickersUtilsProvider.propTypes = {\n  utils: func.isRequired,\n  locale: oneOfType([object, string]),\n  children: oneOfType([element.isRequired, arrayOf(element.isRequired)]).isRequired\n} : void 0;\n\nvar checkUtils = function checkUtils(utils) {\n  if (!utils) {\n    // tslint:disable-next-line\n    throw new Error('Can not find utils in context. You either a) forgot to wrap your component tree in MuiPickersUtilsProvider; or b) mixed named and direct file imports.  Recommendation: use named imports from the module index.');\n  }\n};\nfunction useUtils() {\n  var utils = useContext(MuiPickersContext);\n  checkUtils(utils);\n  return utils;\n}\n\nexport { MuiPickersUtilsProvider as M, MuiPickersContext as a, useUtils as u };\n//# sourceMappingURL=useUtils-cfb96ac9.js.map\n","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from '../../addLeadingZeros/index.js';\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import lightFormatters from '../lightFormatters/index.js';\nimport getUTCDayOfYear from '../../../_lib/getUTCDayOfYear/index.js';\nimport getUTCISOWeek from '../../../_lib/getUTCISOWeek/index.js';\nimport getUTCISOWeekYear from '../../../_lib/getUTCISOWeekYear/index.js';\nimport getUTCWeek from '../../../_lib/getUTCWeek/index.js';\nimport getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport addLeadingZeros from '../../addLeadingZeros/index.js';\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import isValid from '../isValid/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/formatters/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toInteger from '../toInteger/index.js';\nimport getUTCWeekYear from '../getUTCWeekYear/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getUTCISOWeekYear from '../getUTCISOWeekYear/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * var result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\n\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\n\nexport default function endOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * var result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport setUTCDay from '../../../_lib/setUTCDay/index.js';\nimport setUTCISODay from '../../../_lib/setUTCISODay/index.js';\nimport setUTCISOWeek from '../../../_lib/setUTCISOWeek/index.js';\nimport setUTCWeek from '../../../_lib/setUTCWeek/index.js';\nimport startOfUTCISOWeek from '../../../_lib/startOfUTCISOWeek/index.js';\nimport startOfUTCWeek from '../../../_lib/startOfUTCWeek/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCWeek from '../getUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCISOWeek from '../getUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport assign from '../_lib/assign/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport parsers from './_lib/parsers/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   toDate('2016-01-01')\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\n\n  };\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * var result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import addDays from 'date-fns/addDays';\nimport addMonths from 'date-fns/addMonths';\nimport addYears from 'date-fns/addYears';\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\nimport endOfDay from 'date-fns/endOfDay';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport endOfYear from 'date-fns/endOfYear';\nimport format from 'date-fns/format';\nimport getHours from 'date-fns/getHours';\nimport getSeconds from 'date-fns/getSeconds';\nimport getYear from 'date-fns/getYear';\nimport isAfter from 'date-fns/isAfter';\nimport isBefore from 'date-fns/isBefore';\nimport isEqual from 'date-fns/isEqual';\nimport isSameDay from 'date-fns/isSameDay';\nimport isSameYear from 'date-fns/isSameYear';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameHour from 'date-fns/isSameHour';\nimport isValid from 'date-fns/isValid';\nimport dateFnsParse from 'date-fns/parse';\nimport setHours from 'date-fns/setHours';\nimport setMinutes from 'date-fns/setMinutes';\nimport setMonth from 'date-fns/setMonth';\nimport setSeconds from 'date-fns/setSeconds';\nimport setYear from 'date-fns/setYear';\nimport startOfDay from 'date-fns/startOfDay';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport startOfYear from 'date-fns/startOfYear';\n\nvar DateFnsUtils = /** @class */ (function () {\n    function DateFnsUtils(_a) {\n        var locale = (_a === void 0 ? {} : _a).locale;\n        this.yearFormat = \"yyyy\";\n        this.yearMonthFormat = \"MMMM yyyy\";\n        this.dateTime12hFormat = \"MMMM do hh:mm aaaa\";\n        this.dateTime24hFormat = \"MMMM do HH:mm\";\n        this.time12hFormat = \"hh:mm a\";\n        this.time24hFormat = \"HH:mm\";\n        this.dateFormat = \"MMMM do\";\n        this.locale = locale;\n    }\n    // Note: date-fns input types are more lenient than this adapter, so we need to expose our more\n    // strict signature and delegate to the more lenient signature. Otherwise, we have downstream type errors upon usage.\n    DateFnsUtils.prototype.addDays = function (value, count) {\n        return addDays(value, count);\n    };\n    DateFnsUtils.prototype.isValid = function (value) {\n        return isValid(this.date(value));\n    };\n    DateFnsUtils.prototype.getDiff = function (value, comparing) {\n        return differenceInMilliseconds(value, this.date(comparing));\n    };\n    DateFnsUtils.prototype.isAfter = function (value, comparing) {\n        return isAfter(value, comparing);\n    };\n    DateFnsUtils.prototype.isBefore = function (value, comparing) {\n        return isBefore(value, comparing);\n    };\n    DateFnsUtils.prototype.startOfDay = function (value) {\n        return startOfDay(value);\n    };\n    DateFnsUtils.prototype.endOfDay = function (value) {\n        return endOfDay(value);\n    };\n    DateFnsUtils.prototype.getHours = function (value) {\n        return getHours(value);\n    };\n    DateFnsUtils.prototype.setHours = function (value, count) {\n        return setHours(value, count);\n    };\n    DateFnsUtils.prototype.setMinutes = function (value, count) {\n        return setMinutes(value, count);\n    };\n    DateFnsUtils.prototype.getSeconds = function (value) {\n        return getSeconds(value);\n    };\n    DateFnsUtils.prototype.setSeconds = function (value, count) {\n        return setSeconds(value, count);\n    };\n    DateFnsUtils.prototype.isSameDay = function (value, comparing) {\n        return isSameDay(value, comparing);\n    };\n    DateFnsUtils.prototype.isSameMonth = function (value, comparing) {\n        return isSameMonth(value, comparing);\n    };\n    DateFnsUtils.prototype.isSameYear = function (value, comparing) {\n        return isSameYear(value, comparing);\n    };\n    DateFnsUtils.prototype.isSameHour = function (value, comparing) {\n        return isSameHour(value, comparing);\n    };\n    DateFnsUtils.prototype.startOfMonth = function (value) {\n        return startOfMonth(value);\n    };\n    DateFnsUtils.prototype.endOfMonth = function (value) {\n        return endOfMonth(value);\n    };\n    DateFnsUtils.prototype.getYear = function (value) {\n        return getYear(value);\n    };\n    DateFnsUtils.prototype.setYear = function (value, count) {\n        return setYear(value, count);\n    };\n    DateFnsUtils.prototype.date = function (value) {\n        if (typeof value === \"undefined\") {\n            return new Date();\n        }\n        if (value === null) {\n            return null;\n        }\n        return new Date(value);\n    };\n    DateFnsUtils.prototype.parse = function (value, formatString) {\n        if (value === \"\") {\n            return null;\n        }\n        return dateFnsParse(value, formatString, new Date(), { locale: this.locale });\n    };\n    DateFnsUtils.prototype.format = function (date, formatString) {\n        return format(date, formatString, { locale: this.locale });\n    };\n    DateFnsUtils.prototype.isEqual = function (date, comparing) {\n        if (date === null && comparing === null) {\n            return true;\n        }\n        return isEqual(date, comparing);\n    };\n    DateFnsUtils.prototype.isNull = function (date) {\n        return date === null;\n    };\n    DateFnsUtils.prototype.isAfterDay = function (date, value) {\n        return isAfter(date, endOfDay(value));\n    };\n    DateFnsUtils.prototype.isBeforeDay = function (date, value) {\n        return isBefore(date, startOfDay(value));\n    };\n    DateFnsUtils.prototype.isBeforeYear = function (date, value) {\n        return isBefore(date, startOfYear(value));\n    };\n    DateFnsUtils.prototype.isAfterYear = function (date, value) {\n        return isAfter(date, endOfYear(value));\n    };\n    DateFnsUtils.prototype.formatNumber = function (numberToFormat) {\n        return numberToFormat;\n    };\n    DateFnsUtils.prototype.getMinutes = function (date) {\n        return date.getMinutes();\n    };\n    DateFnsUtils.prototype.getMonth = function (date) {\n        return date.getMonth();\n    };\n    DateFnsUtils.prototype.setMonth = function (date, count) {\n        return setMonth(date, count);\n    };\n    DateFnsUtils.prototype.getMeridiemText = function (ampm) {\n        return ampm === \"am\" ? \"AM\" : \"PM\";\n    };\n    DateFnsUtils.prototype.getNextMonth = function (date) {\n        return addMonths(date, 1);\n    };\n    DateFnsUtils.prototype.getPreviousMonth = function (date) {\n        return addMonths(date, -1);\n    };\n    DateFnsUtils.prototype.getMonthArray = function (date) {\n        var firstMonth = startOfYear(date);\n        var monthArray = [firstMonth];\n        while (monthArray.length < 12) {\n            var prevMonth = monthArray[monthArray.length - 1];\n            monthArray.push(this.getNextMonth(prevMonth));\n        }\n        return monthArray;\n    };\n    DateFnsUtils.prototype.mergeDateAndTime = function (date, time) {\n        return this.setMinutes(this.setHours(date, this.getHours(time)), this.getMinutes(time));\n    };\n    DateFnsUtils.prototype.getWeekdays = function () {\n        var _this = this;\n        var now = new Date();\n        return eachDayOfInterval({\n            start: startOfWeek(now, { locale: this.locale }),\n            end: endOfWeek(now, { locale: this.locale })\n        }).map(function (day) { return _this.format(day, \"EEEEEE\"); });\n    };\n    DateFnsUtils.prototype.getWeekArray = function (date) {\n        var start = startOfWeek(startOfMonth(date), { locale: this.locale });\n        var end = endOfWeek(endOfMonth(date), { locale: this.locale });\n        var count = 0;\n        var current = start;\n        var nestedWeeks = [];\n        while (isBefore(current, end)) {\n            var weekNumber = Math.floor(count / 7);\n            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n            nestedWeeks[weekNumber].push(current);\n            current = addDays(current, 1);\n            count += 1;\n        }\n        return nestedWeeks;\n    };\n    DateFnsUtils.prototype.getYearRange = function (start, end) {\n        var startDate = startOfYear(start);\n        var endDate = endOfYear(end);\n        var years = [];\n        var current = startDate;\n        while (isBefore(current, endDate)) {\n            years.push(current);\n            current = addYears(current, 1);\n        }\n        return years;\n    };\n    // displaying methpds\n    DateFnsUtils.prototype.getCalendarHeaderText = function (date) {\n        return this.format(date, this.yearMonthFormat);\n    };\n    DateFnsUtils.prototype.getYearText = function (date) {\n        return this.format(date, \"yyyy\");\n    };\n    DateFnsUtils.prototype.getDatePickerHeaderText = function (date) {\n        return this.format(date, \"EEE, MMM d\");\n    };\n    DateFnsUtils.prototype.getDateTimePickerHeaderText = function (date) {\n        return this.format(date, \"MMM d\");\n    };\n    DateFnsUtils.prototype.getMonthText = function (date) {\n        return this.format(date, \"MMMM\");\n    };\n    DateFnsUtils.prototype.getDayText = function (date) {\n        return this.format(date, \"d\");\n    };\n    DateFnsUtils.prototype.getHourText = function (date, ampm) {\n        return this.format(date, ampm ? \"hh\" : \"HH\");\n    };\n    DateFnsUtils.prototype.getMinuteText = function (date) {\n        return this.format(date, \"mm\");\n    };\n    DateFnsUtils.prototype.getSecondText = function (date) {\n        return this.format(date, \"ss\");\n    };\n    return DateFnsUtils;\n}());\n\nexport default DateFnsUtils;\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * var result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * var result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getSeconds\n * @category Second Helpers\n * @summary Get the seconds of the given date.\n *\n * @description\n * Get the seconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the seconds of 29 February 2012 11:45:05.123:\n * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 5\n */\n\nexport default function getSeconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds();\n  return seconds;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month?\n *\n * @description\n * Are the given dates in the same month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear();\n}","import startOfHour from '../startOfHour/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameHour\n * @category Hour Helpers\n * @summary Are the given dates in the same hour?\n *\n * @description\n * Are the given dates in the same hour?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same hour\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?\n * var result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))\n * //=> true\n */\n\nexport default function isSameHour(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfHour = startOfHour(dirtyDateLeft);\n  var dateRightStartOfHour = startOfHour(dirtyDateRight);\n  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * var result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * var result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport getDaysInMonth from '../getDaysInMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * var result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `eachDay` to `eachDayOfInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))\n *\n *   // v2.0.0 onward\n *\n *   eachDayOfInterval(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }\n *   )\n *   ```\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'menos de un segundo',\n    other: 'menos de {{count}} segundos'\n  },\n  xSeconds: {\n    one: '1 segundo',\n    other: '{{count}} segundos'\n  },\n  halfAMinute: 'medio minuto',\n  lessThanXMinutes: {\n    one: 'menos de un minuto',\n    other: 'menos de {{count}} minutos'\n  },\n  xMinutes: {\n    one: '1 minuto',\n    other: '{{count}} minutos'\n  },\n  aboutXHours: {\n    one: 'alrededor de 1 hora',\n    other: 'alrededor de {{count}} horas'\n  },\n  xHours: {\n    one: '1 hora',\n    other: '{{count}} horas'\n  },\n  xDays: {\n    one: '1 día',\n    other: '{{count}} días'\n  },\n  aboutXWeeks: {\n    one: 'alrededor de 1 semana',\n    other: 'alrededor de {{count}} semanas'\n  },\n  xWeeks: {\n    one: '1 semana',\n    other: '{{count}} semanas'\n  },\n  aboutXMonths: {\n    one: 'alrededor de 1 mes',\n    other: 'alrededor de {{count}} meses'\n  },\n  xMonths: {\n    one: '1 mes',\n    other: '{{count}} meses'\n  },\n  aboutXYears: {\n    one: 'alrededor de 1 año',\n    other: 'alrededor de {{count}} años'\n  },\n  xYears: {\n    one: '1 año',\n    other: '{{count}} años'\n  },\n  overXYears: {\n    one: 'más de 1 año',\n    other: 'más de {{count}} años'\n  },\n  almostXYears: {\n    one: 'casi 1 año',\n    other: 'casi {{count}} años'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'en ' + result;\n    } else {\n      return 'hace ' + result;\n    }\n  }\n\n  return result;\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: \"EEEE, d 'de' MMMM 'de' y\",\n  long: \"d 'de' MMMM 'de' y\",\n  medium: 'd MMM y',\n  short: 'dd/MM/y'\n};\nvar timeFormats = {\n  full: 'HH:mm:ss zzzz',\n  long: 'HH:mm:ss z',\n  medium: 'HH:mm:ss',\n  short: 'HH:mm'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'a las' {{time}}\",\n  long: \"{{date}} 'a las' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'el' eeee 'pasado a la' LT\",\n  yesterday: \"'ayer a la' p\",\n  today: \"'hoy a la' p\",\n  tomorrow: \"'mañana a la' p\",\n  nextWeek: \"eeee 'a la' p\",\n  other: 'P'\n};\nvar formatRelativeLocalePlural = {\n  lastWeek: \"'el' eeee 'pasado a las' p\",\n  yesterday: \"'ayer a las' p\",\n  today: \"'hoy a las' p\",\n  tomorrow: \"'mañana a las' p\",\n  nextWeek: \"eeee 'a las' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, date, _baseDate, _options) {\n  if (date.getUTCHours() !== 1) {\n    return formatRelativeLocalePlural[token];\n  }\n\n  return formatRelativeLocale[token];\n}","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['AC', 'DC'],\n  abbreviated: ['AC', 'DC'],\n  wide: ['antes de cristo', 'después de cristo']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['T1', 'T2', 'T3', 'T4'],\n  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']\n};\nvar monthValues = {\n  narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],\n  abbreviated: ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'],\n  wide: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre']\n};\nvar dayValues = {\n  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],\n  short: ['do', 'lu', 'ma', 'mi', 'ju', 'vi', 'sa'],\n  abbreviated: ['dom', 'lun', 'mar', 'mié', 'jue', 'vie', 'sáb'],\n  wide: ['domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mn',\n    noon: 'md',\n    morning: 'mañana',\n    afternoon: 'tarde',\n    evening: 'tarde',\n    night: 'noche'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'medianoche',\n    noon: 'mediodia',\n    morning: 'mañana',\n    afternoon: 'tarde',\n    evening: 'tarde',\n    night: 'noche'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'medianoche',\n    noon: 'mediodia',\n    morning: 'mañana',\n    afternoon: 'tarde',\n    evening: 'tarde',\n    night: 'noche'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mn',\n    noon: 'md',\n    morning: 'de la mañana',\n    afternoon: 'de la tarde',\n    evening: 'de la tarde',\n    night: 'de la noche'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'medianoche',\n    noon: 'mediodia',\n    morning: 'de la mañana',\n    afternoon: 'de la tarde',\n    evening: 'de la tarde',\n    night: 'de la noche'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'medianoche',\n    noon: 'mediodia',\n    morning: 'de la mañana',\n    afternoon: 'de la tarde',\n    evening: 'de la tarde',\n    night: 'de la noche'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber) {\n  var number = Number(dirtyNumber);\n  return number + 'º';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary Spanish locale.\n * @language Spanish\n * @iso-639-2 spa\n * @author Juan Angosto [@juanangosto]{@link https://github.com/juanangosto}\n * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}\n * @author Fernando Agüero [@fjaguero]{@link https://github.com/fjaguero}\n * @author Gastón Haro [@harogaston]{@link https://github.com/harogaston}\n * @author Yago Carballo [@YagoCarballo]{@link https://github.com/YagoCarballo}\n */\n\nvar locale = {\n  code: 'es',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1\n    /* Monday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(º)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(ac|dc|a|d)/i,\n  abbreviated: /^(a\\.?\\s?c\\.?|a\\.?\\s?e\\.?\\s?c\\.?|d\\.?\\s?c\\.?|e\\.?\\s?c\\.?)/i,\n  wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i\n};\nvar parseEraPatterns = {\n  any: [/^ac/i, /^dc/i],\n  wide: [/^(antes de cristo|antes de la era com[uú]n)/i, /^(despu[eé]s de cristo|era com[uú]n)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^T[1234]/i,\n  wide: /^[1234](º)? trimestre/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[efmajsond]/i,\n  abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,\n  wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[dlmjvs]/i,\n  short: /^(do|lu|ma|mi|ju|vi|sa)/i,\n  abbreviated: /^(dom|lun|mar|mie|jue|vie|sab)/i,\n  wide: /^(domingo|lunes|martes|mi[ée]rcoles|jueves|viernes|s[áa]bado)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],\n  any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,\n  any: /^([ap]\\.?\\s?m\\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mn/i,\n    noon: /^md/i,\n    morning: /mañana/i,\n    afternoon: /tarde/i,\n    evening: /tarde/i,\n    night: /noche/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;"],"sourceRoot":""}